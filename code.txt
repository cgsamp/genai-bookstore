>>> frontend/src/App.js
import React, { useState } from 'react';
import Chat from './Chat';
import BookList from './BookList';
import ModelConfigCreator from './ModelConfigCreator';
import ModelConfigurationList from './ModelConfigurationList';
import ModelInvoker from './ModelInvoker';

function App() {
  const [showChat, setShowChat] = useState(true);
  const [showBooks, setShowBooks] = useState(true);
  const [showConfig, setShowConfig] = useState(false);
  const [showConfigList, setShowConfigList] = useState(false);
  const [showInvoker, setShowInvoker] = useState(false);


  return (
    <div style={{ padding: '2rem', fontFamily: 'sans-serif' }}>
      <h1>GenAI Dashboard</h1>

      <div style={{ marginBottom: '2rem' }}>
        <button onClick={() => setShowChat(prev => !prev)}>
          {showChat ? 'Hide' : 'Show'} Chat
        </button>
        {showChat && (
          <div style={{ marginTop: '1rem' }}>
            <Chat />
          </div>
        )}
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <button onClick={() => setShowConfig(prev => !prev)}>
          {showConfig ? 'Hide' : 'Show'} Create Model Config
        </button>
        {showConfig && (
          <div style={{ marginTop: '1rem' }}>
            <ModelConfigCreator />
          </div>
        )}
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <button onClick={() => setShowConfigList(prev => !prev)}>
          {showConfigList ? 'Hide' : 'Show'} Model Configurations
        </button>
        {showConfigList && (
          <div style={{ marginTop: '1rem' }}>
            <ModelConfigurationList />
          </div>
        )}
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <button onClick={() => setShowInvoker(prev => !prev)}>
          {showInvoker ? 'Hide' : 'Show'} Invoke Model
        </button>
        {showInvoker && (
          <div style={{ marginTop: '1rem' }}>
            <ModelInvoker />
        </div>
        )}
      </div>

      <div>
        <button onClick={() => setShowBooks(prev => !prev)}>
          {showBooks ? 'Hide' : 'Show'} Book List
        </button>
        {showBooks && (
          <div style={{ marginTop: '1rem' }}>
            <BookList />
          </div>
        )}
      </div>
    </div>
  );
}

export default App;

-----------
>>> frontend/src/App.test.js
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

-----------
>>> frontend/src/Chat.js
import React, { useState } from 'react';
import axios from 'axios';

function Chat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');

  const sendMessage = async () => {
    if (!input.trim()) return;

    const userMessage = { role: 'user', content: input };
    setMessages([...messages, userMessage]);

    try {
      const response = await axios.post('http://localhost:8080/chat', { content: input }, {
        headers: { 'Content-Type': 'application/json' }
      });
      const botMessage = { role: 'bot', content: response.data.reply };
      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      console.error('Error calling API:', error);
      setMessages(prev => [...prev, { role: 'error', content: 'Error talking to backend.' }]);
    }

    setInput('');
  };

  return (
    <div>
      <div style={{ marginBottom: '1rem' }}>
        {messages.map((msg, index) => (
          <div key={index} style={{ marginBottom: '.5rem' }}>
            <strong>{msg.role}:</strong> {msg.content}
          </div>
        ))}
      </div>
      <input
        type="text"
        value={input}
        placeholder="Say something..."
        onChange={e => setInput(e.target.value)}
        onKeyDown={e => e.key === 'Enter' && sendMessage()}
        style={{ width: '80%', padding: '0.5rem' }}
      />
      <button onClick={sendMessage} style={{ marginLeft: '0.5rem' }}>
        Send
      </button>
    </div>
  );
}

export default Chat;

-----------
>>> frontend/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

-----------
>>> frontend/src/reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

-----------
>>> frontend/src/setupTests.js
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

-----------
>>> frontend/src/BookList.jsx
// BookList.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function BookList() {
  const [books, setBooks] = useState([]);
  const [summaries, setSummaries] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    axios.get('http://localhost:8080/api/books')
      .then(res => {
        const books = res.data;
        setBooks(books);

        const bookIds = books.map(book => book.id).join(',');
        return axios.get(`http://localhost:8080/api/summaries?entity=ranked_books&entityIds=${bookIds}`);
      })
      .then(res => setSummaries(res.data))
      .catch(err => {
        console.error('Error loading books or summaries:', err);
        setError('Failed to load books');
      });
  }, []);

  function getSummariesForBook(bookId) {
    return summaries.filter(s => s.entityId === bookId);
  }

  if (error) return <div>{error}</div>;

  return (
    <table 
        style={{ 
            width: '100%', 
            tableLayout: 'fixed',
            borderCollapse: 'collapse' 
        }}>
      <thead>
        <tr>
          <th style={{ width: '30px' }}>Rank</th>
          <th style={{ width: '160px' }}>Title</th>
          <th style={{ width: '100px' }}>Author</th>
          <th style={{ width: '40px' }}>Year</th>
          <th style={{ width: '100px' }}>Source</th>
          <th>Summaries</th>
        </tr>
      </thead>
      <tbody>
        {books.map(book => (
          <tr key={book.id}>
            <td>{book.rank}</td>
            <td>{book.title}</td>
            <td>{book.authorName}</td>
            <td>{book.publishYear}</td>
            <td>{book.source?.orgName}</td>
            <td>
              <ul style={{ paddingLeft: '1rem', margin: 0 }}>
                {getSummariesForBook(book.id).map(summary => (
                  <li key={summary.id}>
                    <strong>{summary.modelName}</strong> â€” {new Date(summary.createdAt).toLocaleString()}<br/>
                    {summary.summary}
                  </li>
                ))}
              </ul>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

export default BookList;

-----------
>>> frontend/src/ModelConfigCreator.jsx
// ModelConfigCreator.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function ModelConfigCreator() {
  const [models, setModels] = useState([]);
  const [selectedModelId, setSelectedModelId] = useState('');
  const [modelConfig, setModelConfig] = useState({
    temperature: '',
    top_p: '',
    max_tokens: ''
  });
  const [comment, setComment] = useState('');
  const [statusMessage, setStatusMessage] = useState('');

  useEffect(() => {
    axios.get('/api/models')
      .then(res => setModels(res.data))
      .catch(err => {
        console.error('Error loading models:', err);
        setStatusMessage('Failed to load models');
      });
  }, []);

  const handleConfigChange = (e) => {
    setModelConfig(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  const handleSubmit = async () => {
    if (!selectedModelId) {
      setStatusMessage('Please select a model');
      return;
    }

    try {
      await axios.post('/api/model-configurations', {
        modelId: selectedModelId,
        modelConfig: {
          temperature: parseFloat(modelConfig.temperature),
          top_p: parseFloat(modelConfig.top_p),
          max_tokens: parseInt(modelConfig.max_tokens, 10)
        },
        comment
      });
      setStatusMessage('Model configuration saved!');
      setSelectedModelId('');
      setModelConfig({ temperature: '', top_p: '', max_tokens: '' });
      setComment('');
    } catch (error) {
      console.error('Error saving configuration:', error);
      setStatusMessage('Failed to save configuration');
    }
  };

  return (
    <div style={{ marginTop: '2rem' }}>
      <h2>Create Model Configuration</h2>

      {statusMessage && (
        <div style={{ marginBottom: '1rem', color: 'red' }}>
          {statusMessage}
        </div>
      )}

      <div style={{ marginBottom: '1rem' }}>
        <label>Select Model: </label>
        <select
          value={selectedModelId}
          onChange={e => setSelectedModelId(e.target.value)}
          style={{ marginLeft: '1rem' }}
        >
          <option value="">-- Select --</option>
          {models.map(model => (
            <option key={model.id} value={model.id}>
              {model.modelName} ({model.modelProvider})
            </option>
          ))}
        </select>
      </div>

      <div style={{ marginBottom: '1rem' }}>
        <label>Temperature: </label>
        <input
          type="number"
          step="0.01"
          name="temperature"
          value={modelConfig.temperature}
          onChange={handleConfigChange}
        />
      </div>

      <div style={{ marginBottom: '1rem' }}>
        <label>Top P: </label>
        <input
          type="number"
          step="0.01"
          name="top_p"
          value={modelConfig.top_p}
          onChange={handleConfigChange}
        />
      </div>

      <div style={{ marginBottom: '1rem' }}>
        <label>Max Tokens: </label>
        <input
          type="number"
          name="max_tokens"
          value={modelConfig.max_tokens}
          onChange={handleConfigChange}
        />
      </div>

      <div style={{ marginBottom: '1rem' }}>
        <label>Comment: </label><br/>
        <textarea
          value={comment}
          onChange={e => setComment(e.target.value)}
          rows={3}
          style={{ width: '300px' }}
        />
      </div>

      <button onClick={handleSubmit}>Save Configuration</button>
    </div>
  );
}

export default ModelConfigCreator;

-----------
>>> frontend/src/ModelConfigurationList.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function ModelConfigurationList() {
  const [configs, setConfigs] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    axios.get('/api/model-configurations')
      .then(res => setConfigs(res.data))
      .catch(err => {
        console.error('Error loading model configurations:', err);
        setError('Failed to load configurations');
      });
  }, []);

  if (error) return <div>{error}</div>;

  return (
    <table style={{ width: '100%', tableLayout: 'fixed', borderCollapse: 'collapse' }}>
      <thead>
        <tr>
          <th style={{ width: '160px' }}>Model Name</th>
          <th style={{ width: '80px' }}>Temperature</th>
          <th style={{ width: '80px' }}>Top P</th>
          <th style={{ width: '80px' }}>Max Tokens</th>
          <th style={{ width: '200px' }}>Created</th>
          <th>Comment</th>
        </tr>
      </thead>
      <tbody>
        {configs.map(cfg => (
          <tr key={cfg.id}>
            <td>{cfg.model?.modelName || 'Unknown'}</td>
            <td>{cfg.modelConfig?.temperature}</td>
            <td>{cfg.modelConfig?.top_p}</td>
            <td>{cfg.modelConfig?.max_tokens}</td>
            <td>{cfg.createdAt ? new Date(cfg.createdAt).toLocaleString() : ''}</td>
            <td>{cfg.comment}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

export default ModelConfigurationList;

-----------
>>> frontend/src/ModelInvoker.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function ModelInvoker() {
  const [configs, setConfigs] = useState([]);
  const [selectedConfigId, setSelectedConfigId] = useState('');
  const [inputPrompt, setInputPrompt] = useState('');
  const [response, setResponse] = useState('');
  const [error, setError] = useState(null);

  useEffect(() => {
    axios.get('/api/model-configurations')
      .then(res => setConfigs(res.data))
      .catch(err => {
        console.error('Error loading configurations:', err);
        setError('Failed to load model configurations');
      });
  }, []);

  const handleInvoke = async () => {
    if (!selectedConfigId || !inputPrompt.trim()) {
      setError('Please select a configuration and enter a prompt');
      return;
    }

    try {
      const res = await axios.post('/api/model-call', {
        modelConfigurationId: selectedConfigId,
        prompt: inputPrompt
      });
      setResponse(res.data.response);
      setError(null);
    } catch (err) {
      console.error('Error calling model:', err);
      setError('Failed to invoke model');
      setResponse('');
    }
  };

  return (
    <div style={{ marginTop: '2rem' }}>
      <h2>Invoke Model</h2>

      {error && (
        <div style={{ marginBottom: '1rem', color: 'red' }}>
          {error}
        </div>
      )}

      <div style={{ marginBottom: '1rem' }}>
        <label>Select Configuration: </label>
        <select
          value={selectedConfigId}
          onChange={e => setSelectedConfigId(e.target.value)}
          style={{ marginLeft: '1rem' }}
        >
          <option value="">-- Select --</option>
          {configs.map(cfg => (
            <option key={cfg.id} value={cfg.id}>
              {cfg.model?.modelName || 'Unknown'} - {cfg.comment || ''}
            </option>
          ))}
        </select>
      </div>

      <div style={{ marginBottom: '1rem' }}>
        <label>Prompt: </label><br/>
        <textarea
          value={inputPrompt}
          onChange={e => setInputPrompt(e.target.value)}
          rows={5}
          style={{ width: '400px' }}
        />
      </div>

      <button onClick={handleInvoke}>Send</button>

      {response && (
        <div style={{ marginTop: '2rem', padding: '1rem', border: '1px solid #ccc' }}>
          <h3>Response:</h3>
          <pre style={{ whiteSpace: 'pre-wrap' }}>{response}</pre>
        </div>
      )}
    </div>
  );
}

export default ModelInvoker;

-----------
>>> backend/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.4</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>net.sampsoftware</groupId>
    <artifactId>genai</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>genai</name>
    <description>GenAI bookstore</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>21</java.version>
        <spring-ai.version>1.0.0-M8</spring-ai.version>
        <mapstruct.version>1.5.5.Final</mapstruct.version>
        <lombok.version>1.18.30</lombok.version>
    </properties>

    <repositories>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestone Repository</name>
            <url>https://repo.spring.io/milestone</url>
        </repository>
    </repositories>


    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.ai</groupId>
            <artifactId>spring-ai-starter-model-openai</artifactId>
        </dependency>        

        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>1.5.5.Final</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>1.5.5.Final</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.ai</groupId>
            <artifactId>spring-ai-postgresml</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.32</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>6.4.4.Final</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
            <exclusion>
                <groupId>org.junit.vintage</groupId>
                <artifactId>junit-vintage-engine</artifactId>
            </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <version>1.10.1</version>
            <scope>test</scope>
        </dependency>

        <!-- Testcontainers -->
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>




    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.ai</groupId>
                <artifactId>spring-ai-bom</artifactId>
                <version>${spring-ai.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.testcontainers</groupId>
                <artifactId>testcontainers-bom</artifactId>
                <version>1.19.1</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.1.2</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

-----------
>>> backend/run.sh
#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

set -a
source ../.env
set +a

set -x

./mvnw clean compile $1

-----------
>>> backend/src/main/resources/application.yml
spring:
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      chat:
        options:
          model: gpt-3.5-turbo

  application:
    name: genai

  datasource:
    url: jdbc:postgresql://localhost:5432/bookstore
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true

  sql:
    init:
      mode: always
      schema-location: classpath:/schema.sql


logging:
    level:
        org.springframework.ai: DEBUG
        org.springframework.boot.autoconfigure: INFO

server:
  port: 8080


-----------
>>> backend/src/test/resources/application.yml
spring:

  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect



  ai:
    openai:
      api-key: testkey
      chat:
        options:
          model: gpt-3.5-turbo

-----------
>>> frontend/package.json
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.8.4",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://localhost:8080"
}

-----------
>>> frontend/public/manifest.json
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

-----------
>>> backend/src/main/resources/book_rank_source.sql
INSERT INTO book_rank_source (org_name, publish_date) VALUES ('New York Times','2024-07-08') RETURNING id;

-----------
>>> backend/src/main/resources/schema.sql
/*
DROP TABLE IF EXISTS messages;
DROP TABLE IF EXISTS entity_summary;
DROP TABLE IF EXISTS ranked_books;
DROP TABLE IF EXISTS book_rank_source;
DROP TABLE IF EXISTS model_configuration;
DROP TABLE IF EXISTS model;
*/

CREATE TABLE IF NOT EXISTS messages (
    id BIGSERIAL PRIMARY KEY,
    content TEXT,
    created_at TIMESTAMPTZ
);

CREATE TABLE IF NOT EXISTS book_rank_source (
    id BIGSERIAL PRIMARY KEY,
    org_name VARCHAR(200),
    publish_date DATE
);

CREATE TABLE IF NOT EXISTS ranked_books (
    id BIGSERIAL PRIMARY KEY,
    list_id BIGINT REFERENCES book_rank_source(id),
    rank INTEGER,
    title varchar(200),
    author_name varchar(200),
    publish_year varchar(10)
);

CREATE TABLE IF NOT EXISTS model (
    id BIGSERIAL PRIMARY KEY,
    model_name VARCHAR(200),
    model_provider VARCHAR(200),
    model_api_url VARCHAR(200),
    comment TEXT
);

CREATE TABLE IF NOT EXISTS model_configuration (
    id BIGSERIAL PRIMARY KEY,
    model_id BIGINT REFERENCES model(id),
    model_config JSONB,
    comment TEXT,
    created_at TIMESTAMPTZ
);


CREATE TABLE IF NOT EXISTS entity_summary (
    id BIGSERIAL PRIMARY KEY,
    model_configuration_id BIGINT REFERENCES model_configuration(id),
    entity varchar(200),
	entity_id BIGINT,
    summary TEXT,
    created_at TIMESTAMPTZ
);


-----------
>>> backend/src/main/resources/test_data.sql
insert into model (model_name, model_provider, model_api_url, comment) values ('Test model', 'Model Test Inc', 'https://example.com/api','This is here to test things.') returning id;
INSERT INTO model_configuration (model_id, model_config, comment, created_at)
VALUES (
  1,
  '{"temperature": 0.7, "max_tokens": 150, "top_p": 0.9}',
  'Sample config for testing',
  now()
);
insert into entity_summary (model_configuration_id, entity, entity_id, summary, created_at)
values (
1, 'ranked_books',3,'This book was less than wonderful.',now()
);
insert into entity_summary (model_configuration_id, entity, entity_id, summary, created_at)
values (
1, 'ranked_books',3,'I thought it was okay.',now()
);

-----------
>>> backend/src/main/resources/top100of21st.sql
INSERT INTO book_rank_source (org_name, publish_date) VALUES ('New York Times','2024-07-08') RETURNING id;

INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,1,'My Brilliant Friend','Elena Ferrante',2012);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,2,'The Warmth of Other Suns','Isabel Wilkerson',2010);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,3,'Wolf Hall','Hilary Mantel',2009);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,4,'The Known World','Edward P. Jones',2003);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,5,'The Corrections','Jonathan Franzen',2001);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,6,'2666','Roberto BolaÃ±o',2008);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,7,'The Underground Railroad','Colson Whitehead',2016);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,8,'Austerlitz','W.G. Sebald',2001);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,9,'Never Let Me Go','Kazuo Ishiguro',2005);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,10,'Gilead','Marilynne Robinson',2004);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,11,'The Brief Wondrous Life of Oscar Wao','Junot DÃ­az',2007);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,12,'The publish_year of Magical Thinking','Joan Didion',2005);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,13,'The Road','Cormac McCarthy',2006);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,14,'Outline','Rachel Cusk',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,15,'Pachinko','Min Jin Lee',2017);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,16,'The Amazing Adventures of Kavalier & Clay','Michael Chabon',2000);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,17,'The Sellout','Paul Beatty',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,18,'Lincoln in the Bardo','George Saunders',2017);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,19,'Say Nothing','Patrick Radden Keefe',2019);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,20,'Erasure','Percival Everett',2001);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,21,'Evicted','Matthew Desmond',2016);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,22,'Behind the Beautiful Forevers','Katherine Boo',2012);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,23,'Hateship, Friendship, Courtship, Loveship, Marriage','Alice Munro',2001);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,24,'The Overstory','Richard Powers',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,25,'Random Family','Adrian Nicole LeBlanc',2003);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,26,'Atonement','Ian McEwan',2002);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,27,'Americanah','Chimamanda Ngozi Adichie',2013);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,28,'Cloud Atlas','David Mitchell',2004);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,29,'The Last Samurai','Helen DeWitt',2000);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,30,'Sing, Unburied, Sing','Jesmyn Ward',2017);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,31,'White Teeth','Zadie Smith',2000);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,32,'The Line of Beauty','Alan Hollinghurst',2004);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,33,'Salvage the Bones','Jesmyn Ward',2011);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,34,'Citizen','Claudia Rankine',2014);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,35,'Fun Home','Alison Bechdel',2006);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,36,'Between the World and Me','Ta-Nehisi Coates',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,37,'The publish_years','Annie Ernaux',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,38,'The Savage Detectives','Roberto BolaÃ±o',2007);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,39,'A Visit From the Goon Squad','Jennifer Egan',2010);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,40,'H Is for Hawk','Helen Macdonald',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,41,'Small Things Like These','Claire Keegan',2021);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,42,'A Brief History of Seven Killings','Marlon James',2014);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,43,'Postwar','Tony Judt',2005);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,44,'The Fifth Season','N. K. Jemisin',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,45,'The Argonauts','Maggie Nelson',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,46,'The Goldfinch','Donna Tartt',2013);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,47,'A Mercy','Toni Morrison',2008);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,48,'Persepolis','Marjane Satrapi',2003);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,49,'The Vegetarian','Han Kang',2016);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,50,'Trust','Hernan Diaz',2022);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,51,'Life After Life','Kate Atkinson',2013);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,52,'Train Dreams','Denis Johnson',2011);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,53,'Runaway','Alice Munro',2004);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,54,'Tenth of December','George Saunders',2013);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,55,'The Looming Tower','Lawrence Wright',2006);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,56,'The Flamethrowers','Rachel Kushner',2013);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,57,'Nickel and Dimed','Barbara Ehrenreich',2001);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,58,'Stay True','Hua Hsu',2022);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,59,'Middlesex','Jeffrey Eugenides',2002);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,60,'Heavy','Kiese Laymon',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,61,'Demon Copperhead','Barbara Kingsolver',2022);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,62,'10:04','Ben Lerner',2014);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,63,'Veronica','Mary Gaitskill',2005);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,64,'The Great Believers','Rebecca Makkai',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,65,'The Plot Against America','Philip Roth',2004);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,66,'We the Animals','Justin Torres',2011);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,67,'Far From the Tree','Andrew Solomon',2012);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,68,'The Friend','Sigrid Nunez',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,69,'The New Jim Crow','Michelle Alexander',2010);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,70,'All Aunt Hagar''s Children','Edward P. Jones',2006);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,71,'The Copenhagen Trilogy','Tove Ditlevsen',2021);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,72,'Secondhand Time','Svetlana Alexievich',2016);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,73,'The Passage of Power','Robert Caro',2012);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,74,'Olive Kitteridge','Elizabeth Strout',2008);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,75,'Exit West','Mohsin Hamid',2017);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,76,'Tomorrow, and Tomorrow, and Tomorrow','Gabrielle Zevin',2022);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,77,'An American Marriage','Tayari Jones',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,78,'Septology','Jon Fosse',2022);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,79,'A Manual for Cleaning Women','Lucia Berlin',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,80,'The Story of the Lost Child','Elena Ferrante',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,81,'Pulphead','John Jeremiah Sullivan',2011);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,82,'Hurricane Season','Fernanda Melchor',2020);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,83,'When We Cease to Understand the World','BenjamÃ­n Labatut',2021);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,84,'The Emperor of All Maladies','Siddhartha Mukherjee',2010);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,85,'Pastoralia','George Saunders',2000);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,86,'Frederick Douglass','David W. Blight',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,87,'Detransition, Baby','Torrey Peters',2021);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,88,'The Collected Stories of Lydia Davis','Lydia Davis',2010);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,89,'The Return','Hisham Matar',2016);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,90,'The Sympathizer','Viet Thanh Nguyen',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,91,'The Human Stain','Philip Roth',2000);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,92,'The Days of Abandonment','Elena Ferrante',2005);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,93,'Station Eleven','Emily St. John Mandel',2014);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,94,'On Beauty','Zadie Smith',2005);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,95,'Bring Up the Bodies','Hilary Mantel',2012);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,96,'Wayward Lives, Beautiful Experiments','Saidiya Hartman',2019);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,97,'Men We Reaped','Jesmyn Ward',2013);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,98,'Bel Canto','Ann Patchett',2001);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,99,'How to Be Both','Ali Smith',2014);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,100,'Tree of Smoke','Denis Johnson',2007);

-----------
>>> backend/src/main/java/net/sampsoftware/genai/GenaiApplication.java
package net.sampsoftware.genai;

import org.springframework.boot.WebApplicationType;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class GenaiApplication {
    public static void main(String[] args) {
        new SpringApplicationBuilder(GenaiApplication.class)
            .web(WebApplicationType.SERVLET) // ðŸ”’ Explicitly use Servlet mode
            .run(args);
    }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/config/WebConfig.java
package net.sampsoftware.genai.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://localhost:3000")
                .allowedMethods("*")
                .allowedHeaders("*");
    }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/controller/BookRankSourceController.java
package net.sampsoftware.genai.controller;

import net.sampsoftware.genai.model.BookRankSource;
import net.sampsoftware.genai.repository.BookRankSourceRepository;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/sources")
public class BookRankSourceController {
    private final BookRankSourceRepository repo;
    public BookRankSourceController(BookRankSourceRepository repo) { this.repo = repo; }

    @GetMapping public List<BookRankSource> all() { return repo.findAll(); }
    @GetMapping("/{id}") public BookRankSource one(@PathVariable Long id) { return repo.findById(id).orElseThrow(); }
    @PostMapping public BookRankSource create(@RequestBody BookRankSource s) { return repo.save(s); }
    @PutMapping("/{id}") public BookRankSource update(@PathVariable Long id, @RequestBody BookRankSource s) {
        s.setId(id); return repo.save(s);
    }
    @DeleteMapping("/{id}") public void delete(@PathVariable Long id) { repo.deleteById(id); }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/controller/ChatController.java
package net.sampsoftware.genai.controller;

import net.sampsoftware.genai.dto.ChatRequest;
import net.sampsoftware.genai.dto.ChatResponse;
import net.sampsoftware.genai.service.ChatService;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/chat")
public class ChatController {

    private final ChatService chatService;
    public ChatController(ChatService chatService) {
        this.chatService = chatService;
    }

    @PostMapping
    public ChatResponse chat(@RequestBody ChatRequest request) {
        String reply = chatService.chat(request.getContent());
        System.out.println(reply);
        return new ChatResponse(reply);
    }

}


-----------
>>> backend/src/main/java/net/sampsoftware/genai/controller/CrudDtoController.java
package net.sampsoftware.genai.controller;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public abstract class CrudDtoController<T, D, ID> {

    protected abstract JpaRepository<T, ID> getRepository();
    protected abstract D toDto(T entity);
    protected abstract T toEntity(D dto);

    @GetMapping
    public List<D> list() {
        return getRepository().findAll().stream()
                .map(this::toDto)
                .collect(Collectors.toList());
    }

    @GetMapping("/{id}")
    public ResponseEntity<D> get(@PathVariable ID id) {
        Optional<T> result = getRepository().findById(id);
        return result.map(t -> ResponseEntity.ok(toDto(t)))
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<D> create(@RequestBody D dto) {
        T saved = getRepository().save(toEntity(dto));
        return ResponseEntity.ok(toDto(saved));
    }

    @PutMapping("/{id}")
    public ResponseEntity<D> update(@PathVariable ID id, @RequestBody D dto) {
        if (!getRepository().existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        T updated = toEntity(dto);
        return ResponseEntity.ok(toDto(getRepository().save(updated)));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable ID id) {
        if (!getRepository().existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        getRepository().deleteById(id);
        return ResponseEntity.noContent().build();
    }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/controller/EntitySummaryController.java
// Controller
package net.sampsoftware.genai.controller;

import net.sampsoftware.genai.dto.SummaryDto;
import net.sampsoftware.genai.repository.EntitySummaryRepository;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/summaries")
public class EntitySummaryController {

    private final EntitySummaryRepository summaryRepo;

    public EntitySummaryController(EntitySummaryRepository summaryRepo) {
        this.summaryRepo = summaryRepo;
    }

    @GetMapping
    public List<SummaryDto> getSummaries(
        @RequestParam String entity,
        @RequestParam List<Long> entityIds
    ) {
        return summaryRepo.findSummariesByEntityAndIds(entity, entityIds);
    }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/controller/MessageController.java
// MessageController.java
package net.sampsoftware.genai.controller;

import net.sampsoftware.genai.model.Message;
import net.sampsoftware.genai.repository.MessageRepository;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/messages")
public class MessageController {
    private final MessageRepository repo;
    public MessageController(MessageRepository repo) { this.repo = repo; }

    @GetMapping public List<Message> all() { return repo.findAll(); }
    @PostMapping public Message create(@RequestBody Message m) { return repo.save(m); }
    @DeleteMapping("/{id}") public void delete(@PathVariable Long id) { repo.deleteById(id); }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/controller/ModelConfigurationController.java
package net.sampsoftware.genai.controller;

import lombok.RequiredArgsConstructor;
import net.sampsoftware.genai.dto.ModelConfigurationDto;
import net.sampsoftware.genai.mapper.ModelConfigurationMapper;
import net.sampsoftware.genai.model.ModelConfiguration;
import net.sampsoftware.genai.repository.ModelConfigurationRepository;

import org.springframework.http.ResponseEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/model-configurations")
@RequiredArgsConstructor
public class ModelConfigurationController extends CrudDtoController<ModelConfiguration, ModelConfigurationDto, Long> {

    private final ModelConfigurationRepository configRepository;
    private final ModelConfigurationMapper configMapper;

    @Override
    protected JpaRepository<ModelConfiguration, Long> getRepository() {
        return configRepository;
    }

    @Override
    protected ModelConfigurationDto toDto(ModelConfiguration entity) {
        return configMapper.toDto(entity);
    }

    @Override
    protected ModelConfiguration toEntity(ModelConfigurationDto dto) {
        return configMapper.toEntity(dto);
    }

    @Override
    @GetMapping("/{id}")
    public ResponseEntity<ModelConfigurationDto> get(@PathVariable Long id) {
        return configRepository.findByIdWithModel(id)
            .map(configMapper::toDto)
            .map(ResponseEntity::ok)
            .orElse(ResponseEntity.notFound().build());
    }
    

}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/controller/ModelController.java
package net.sampsoftware.genai.controller;

import lombok.RequiredArgsConstructor;
import net.sampsoftware.genai.dto.ModelDto;
import net.sampsoftware.genai.mapper.ModelMapper;
import net.sampsoftware.genai.model.Model;
import net.sampsoftware.genai.repository.ModelRepository;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/models")
@RequiredArgsConstructor
public class ModelController extends CrudDtoController<Model, ModelDto, Long> {

    private final ModelRepository modelRepository;
    private final ModelMapper modelMapper;

    @Override
    protected JpaRepository<Model, Long> getRepository() {
        return modelRepository;
    }

    @Override
    protected ModelDto toDto(Model entity) {
        return modelMapper.toDto(entity);
    }

    @Override
    protected Model toEntity(ModelDto dto) {
        return modelMapper.toEntity(dto);
    }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/controller/RankedBookController.java
package net.sampsoftware.genai.controller;

import net.sampsoftware.genai.model.RankedBook;
import net.sampsoftware.genai.repository.RankedBookRepository;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/books")
public class RankedBookController {
    private final RankedBookRepository repo;
    public RankedBookController(RankedBookRepository repo) { this.repo = repo; }

    @GetMapping public List<RankedBook> all() { return repo.findAll(); }
    @GetMapping("/list/{sourceId}") public List<RankedBook> byList(@PathVariable Long sourceId) {
        return repo.findBySourceIdOrderByRankAsc(sourceId);
    }
    @PostMapping public RankedBook create(@RequestBody RankedBook b) { return repo.save(b); }
    @PutMapping("/{id}") public RankedBook update(@PathVariable Long id, @RequestBody RankedBook b) {
        b.setId(id); return repo.save(b);
    }
    @DeleteMapping("/{id}") public void delete(@PathVariable Long id) { repo.deleteById(id); }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/dto/ChatRequest.java
package net.sampsoftware.genai.dto;

public class ChatRequest {
    private String content;

    public ChatRequest() {}

    public ChatRequest(String content) {
        this.content = content;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/dto/ChatResponse.java
package net.sampsoftware.genai.dto;

public class ChatResponse {
    private String reply;

    public ChatResponse() {}

    public ChatResponse(String reply) {
        this.reply = reply;
    }

    public String getReply() {
        return reply;
    }

    public void setReply(String reply) {
        this.reply = reply;
    }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/dto/ModelCallRequest.java
package net.sampsoftware.genai.dto;

public record ModelCallRequest(
    Long modelConfigurationId,
    String prompt
) {}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/dto/ModelConfigurationDto.java
package net.sampsoftware.genai.dto;

import com.fasterxml.jackson.databind.JsonNode;
import lombok.Data;

import java.time.Instant;

@Data
public class ModelConfigurationDto {
    private Long id;
    private Long modelId;
    private String modelName;
    private String modelProvider;
    private JsonNode modelConfig;
    private String comment;
    private Instant createdAt;
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/dto/ModelDto.java
package net.sampsoftware.genai.dto;

import lombok.Data;

@Data
public class ModelDto {
    private Long id;
    private String modelName;
    private String modelProvider;
    private String modelApiUrl;
    private String comment;
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/dto/SummaryDto.java
package net.sampsoftware.genai.dto;

import java.time.LocalDateTime;

public class SummaryDto {
    private Long id;
    private Long entityId;
    private String summary;
    private String modelName;
    private LocalDateTime createdAt;

    public SummaryDto(Long id, Long entityId, String summary, String modelName, LocalDateTime createdAt) {
        this.id = id;
        this.entityId = entityId;
        this.summary = summary;
        this.modelName = modelName;
        this.createdAt = createdAt;
    }

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public Long getEntityId() { return entityId; }
    public void setEntityId(Long entityId) { this.entityId = entityId; }

    public String getSummary() { return summary; }
    public void setSummary(String summary) { this.summary = summary; }

    public String getModelName() { return modelName; }
    public void setModelName(String modelName) { this.modelName = modelName; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/mapper/ModelConfigurationMapper.java
package net.sampsoftware.genai.mapper;

import net.sampsoftware.genai.dto.ModelConfigurationDto;
import net.sampsoftware.genai.model.Model;
import net.sampsoftware.genai.model.ModelConfiguration;
import org.mapstruct.*;

@Mapper(componentModel = "spring")
public interface ModelConfigurationMapper {

    @Mapping(source = "model.id", target = "modelId")
    @Mapping(source = "model.modelName", target = "modelName")
    @Mapping(source = "model.modelProvider", target = "modelProvider")
    ModelConfigurationDto toDto(ModelConfiguration entity);

    @Mapping(target = "model", source = "modelId", qualifiedByName = "modelFromId")
    @Mapping(target = "createdAt", ignore = true)  // Let entity default it
    ModelConfiguration toEntity(ModelConfigurationDto dto);

    @Named("modelFromId")
    default Model modelFromId(Long id) {
        if (id == null) return null;
        Model model = new Model();
        model.setId(id);
        return model;
    }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/mapper/ModelMapper.java
package net.sampsoftware.genai.mapper;

import net.sampsoftware.genai.dto.ModelDto;
import net.sampsoftware.genai.model.Model;
import org.mapstruct.Mapper;

@Mapper(componentModel = "spring")
public interface ModelMapper {
    ModelDto toDto(Model entity);
    Model toEntity(ModelDto dto);
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/model/BookRankSource.java
package net.sampsoftware.genai.model;

import jakarta.persistence.*;
import java.time.LocalDate;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
@Table(name = "book_rank_source")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class BookRankSource {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String orgName;
    private LocalDate publishDate;

    @OneToMany(mappedBy = "source", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonIgnore
    private List<RankedBook> rankedBooks;

    // Getters and setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getOrgName() { return orgName; }
    public void setOrgName(String orgName) { this.orgName = orgName; }
    public LocalDate getPublishDate() { return publishDate; }
    public void setPublishDate(LocalDate publishDate) { this.publishDate = publishDate; }
    public List<RankedBook> getRankedBooks() { return rankedBooks; }
    public void setRankedBooks(List<RankedBook> rankedBooks) { this.rankedBooks = rankedBooks; }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/model/EntitySummary.java
package net.sampsoftware.genai.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "entity_summary")
public class EntitySummary {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "model_configuration_id")
    private ModelConfiguration modelConfiguration;

    private String entity;

    @Column(name = "entity_id")
    private Long entityId;

    @Column(columnDefinition = "TEXT")
    private String summary;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    // Getters and setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public ModelConfiguration getModelConfiguration() { return modelConfiguration; }
    public void setModelConfiguration(ModelConfiguration modelConfiguration) { this.modelConfiguration = modelConfiguration; }

    public String getEntity() { return entity; }
    public void setEntity(String entity) { this.entity = entity; }

    public Long getEntityId() { return entityId; }
    public void setEntityId(Long entityId) { this.entityId = entityId; }

    public String getSummary() { return summary; }
    public void setSummary(String summary) { this.summary = summary; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/model/Message.java
package net.sampsoftware.genai.model;

import jakarta.persistence.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;

@Entity
@Table(name = "messages")
@EntityListeners(AuditingEntityListener.class)
public class Message {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String content;

    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdDate;

    // Getters and setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getContent() { return content; }
    public void setContent(String content) { this.content = content; }

    public LocalDateTime getCreatedDate() { return createdDate; }
    public void setCreatedDate(LocalDateTime createdDate) { this.createdDate = createdDate; }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/model/Model.java
package net.sampsoftware.genai.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Model {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String modelName;
    private String modelProvider;
    private String modelApiUrl;
    private String comment;
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/model/ModelConfiguration.java
package net.sampsoftware.genai.model;

import com.fasterxml.jackson.databind.JsonNode;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.JdbcTypeCode;
import org.hibernate.type.SqlTypes;

import java.time.Instant;

@Entity
@Table(name = "model_configuration")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ModelConfiguration {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "model_id")
    private Model model;

    @JdbcTypeCode(SqlTypes.JSON)
    @Column(columnDefinition = "jsonb")
    private JsonNode modelConfig;

    private String comment;

    @Builder.Default
    private Instant createdAt = Instant.now();
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/model/RankedBook.java
package net.sampsoftware.genai.model;

import jakarta.persistence.*;

@Entity
@Table(name = "ranked_books")
public class RankedBook {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Integer rank;
    private String title;
    private String authorName;
    private String publishYear;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "list_id")
    private BookRankSource source;

    // Getters and setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public Integer getRank() { return rank; }
    public void setRank(Integer rank) { this.rank = rank; }
    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }
    public String getAuthorName() { return authorName; }
    public void setAuthorName(String authorName) { this.authorName = authorName; }
    public String getPublishYear() { return publishYear; }
    public void setPublishYear(String publishYear) { this.publishYear = publishYear; }
    public BookRankSource getSource() { return source; }
    public void setSource(BookRankSource source) { this.source = source; }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/repository/BookRankSourceRepository.java
package net.sampsoftware.genai.repository;

import net.sampsoftware.genai.model.BookRankSource;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BookRankSourceRepository extends JpaRepository<BookRankSource, Long> {}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/repository/EntitySummaryRepository.java
package net.sampsoftware.genai.repository;

import net.sampsoftware.genai.dto.SummaryDto;
import net.sampsoftware.genai.model.EntitySummary;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface EntitySummaryRepository extends JpaRepository<EntitySummary, Long> {

    @Query("""
        SELECT new net.sampsoftware.genai.dto.SummaryDto(
            es.id, es.entityId, es.summary,
            m.modelName, es.createdAt
        )
        FROM EntitySummary es
        JOIN es.modelConfiguration mc
        JOIN mc.model m
        WHERE es.entity = :entity
        AND es.entityId IN :entityIds
    """)
    List<SummaryDto> findSummariesByEntityAndIds(
        @Param("entity") String entity,
        @Param("entityIds") List<Long> entityIds
    );
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/repository/MessageRepository.java
package net.sampsoftware.genai.repository;

import net.sampsoftware.genai.model.Message;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MessageRepository extends JpaRepository<Message, Long> {}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/repository/ModelConfigurationRepository.java
package net.sampsoftware.genai.repository;

import net.sampsoftware.genai.model.ModelConfiguration;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

public interface ModelConfigurationRepository extends JpaRepository<ModelConfiguration, Long> {

    @Query("SELECT c FROM ModelConfiguration c JOIN FETCH c.model WHERE c.id = :id")
    Optional<ModelConfiguration> findByIdWithModel(@Param("id") Long id);


}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/repository/ModelRepository.java
package net.sampsoftware.genai.repository;

import net.sampsoftware.genai.model.Model;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ModelRepository extends JpaRepository<Model, Long> {}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/repository/RankedBookRepository.java
package net.sampsoftware.genai.repository;

import net.sampsoftware.genai.model.RankedBook;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface RankedBookRepository extends JpaRepository<RankedBook, Long> {
    List<RankedBook> findBySourceIdOrderByRankAsc(Long sourceId);
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/service/ChatService.java
package net.sampsoftware.genai.service;

import org.springframework.stereotype.Service;
import org.springframework.ai.chat.client.ChatClient;


@Service
public class ChatService {

    private final ChatClient chatClient;

    public ChatService(ChatClient.Builder chatClientBuilder) {
        this.chatClient = chatClientBuilder.build();
    }

    public String chat(String content) {
        return this.chatClient.prompt()
            .user(content)
            .call()
            .content();
    }
}

-----------
>>> backend/src/main/java/net/sampsoftware/genai/web/ModelConfigurationRequest.java
package net.sampsoftware.genai.web;

import com.fasterxml.jackson.databind.JsonNode;

public record ModelConfigurationRequest(
        Long modelId,
        JsonNode modelConfig,
        String comment
) {}

-----------
>>> backend/src/test/java/net/sampsoftware/genai/AbstractPostgresTest.java
package net.sampsoftware.genai;

import org.junit.jupiter.api.TestInstance;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

@Testcontainers
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestExecutionListeners(
    listeners = { DependencyInjectionTestExecutionListener.class },
    mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS
)
public abstract class AbstractPostgresTest {

    static final PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15")
            .withDatabaseName("testdb")
            .withUsername("test")
            .withPassword("test");


    static {
        if (!postgres.isRunning()) {
            postgres.start();
        }
    }
        
        

    @DynamicPropertySource
    static void overrideProps(DynamicPropertyRegistry registry) {
        System.out.println("Setting dynamic properties from Testcontainers");
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
        registry.add("spring.datasource.driver-class-name", postgres::getDriverClassName);
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "update");
        registry.add("spring.jpa.database-platform", () -> "org.hibernate.dialect.PostgreSQLDialect");
    }
}

-----------
>>> backend/src/test/java/net/sampsoftware/genai/ModelConfigurationControllerTest.java
package net.sampsoftware.genai;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import net.sampsoftware.genai.model.Model;
import net.sampsoftware.genai.repository.ModelRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import com.jayway.jsonpath.JsonPath;

@SpringBootTest
@AutoConfigureMockMvc
public class ModelConfigurationControllerTest extends AbstractPostgresTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private ModelRepository modelRepository;

    @Test
    void createAndFetchModelConfiguration() throws Exception {
        // Create and save the Model entity first
        Model model = modelRepository.save(new Model(null, "gpt-4", "openai", "https://api.openai.com/v1", "test model"));

        // Create config JSON
        ObjectNode config = objectMapper.createObjectNode();
        config.put("temperature", 0.7);

        // Build JSON body for ModelConfigurationDto
        ObjectNode body = objectMapper.createObjectNode();
        body.put("modelId", model.getId());
        body.put("comment", "some comment");
        body.set("modelConfig", config);

        // Create ModelConfiguration
        String response = mockMvc.perform(post("/api/model-configurations")
                .contentType(MediaType.APPLICATION_JSON)
                .content(body.toString()))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.id").isNumber())
            .andReturn()
            .getResponse()
            .getContentAsString();

        Long configId = ((Integer)JsonPath.read(response, "$.id")).longValue();

        // Now GET by ID (this uses your fetch-joined method)
        mockMvc.perform(get("/api/model-configurations/{id}", configId))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.modelName").value("gpt-4"))
            .andExpect(jsonPath("$.modelProvider").value("openai"))
            .andExpect(jsonPath("$.modelConfig.temperature").value(0.7));
    }
}

-----------
>>> backend/src/test/java/net/sampsoftware/genai/ModelConfigurationRepositoryTest.java
package net.sampsoftware.genai;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import net.sampsoftware.genai.model.Model;
import net.sampsoftware.genai.model.ModelConfiguration;
import net.sampsoftware.genai.repository.ModelConfigurationRepository;
import net.sampsoftware.genai.repository.ModelRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
@ActiveProfiles("test")
public class ModelConfigurationRepositoryTest extends AbstractPostgresTest {

    @Autowired
    private ModelConfigurationRepository configRepo;

    @Autowired
    private ModelRepository modelRepo;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void canSaveAndLoadModelConfiguration() {
        Model model = modelRepo.save(new Model(null, "gpt-4", "openai", "https://api.openai.com/v1", ""));

        ObjectNode configJson = objectMapper.createObjectNode();
        configJson.put("temperature", 0.7);

        ModelConfiguration config = ModelConfiguration.builder()
            .model(model)
            .modelConfig(configJson)
            .comment("Initial config")
            .createdAt(Instant.now())
            .build();

        ModelConfiguration saved = configRepo.save(config);
        assertThat(saved.getId()).isNotNull();
        ModelConfiguration loaded = configRepo.findById(saved.getId()).orElseThrow();
        assertThat(loaded.getModel().getId()).isEqualTo(model.getId());
        assertThat(loaded.getComment()).isEqualTo("Initial config");
        assertThat(loaded.getModelConfig().get("temperature").asDouble()).isEqualTo(0.7);

    }
}

-----------
>>> backend/src/test/java/net/sampsoftware/genai/ModelControllerTest.java
package net.sampsoftware.genai;

import com.fasterxml.jackson.databind.ObjectMapper;
import net.sampsoftware.genai.dto.ModelDto;
import net.sampsoftware.genai.repository.ModelRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
class ModelControllerTest extends AbstractPostgresTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ModelRepository modelRepo;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void createAndFetchModel() throws Exception {
        ModelDto dto = new ModelDto();
        dto.setModelName("gpt-3.5");
        dto.setModelProvider("openai");
        dto.setModelApiUrl("https://api.openai.com");
        dto.setComment("test");

        String json = objectMapper.writeValueAsString(dto);

        String response = mockMvc.perform(post("/api/models")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(json))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").exists())
                .andReturn().getResponse().getContentAsString();

        ModelDto returned = objectMapper.readValue(response, ModelDto.class);
        assertThat(returned.getModelName()).isEqualTo("gpt-3.5");

        mockMvc.perform(get("/api/models/" + returned.getId()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.modelProvider").value("openai"));
    }
}

-----------
>>> backend/src/test/java/net/sampsoftware/genai/ModelRepositoryTest.java
package net.sampsoftware.genai;

import net.sampsoftware.genai.model.Model;
import net.sampsoftware.genai.repository.ModelRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
@ActiveProfiles("test")
public class ModelRepositoryTest extends AbstractPostgresTest {

    @Autowired
    private ModelRepository modelRepository;

    @Test
    void canSaveAndFindModel() {
        Model model = new Model(null, "gpt-4", "openai", "https://api.openai.com/v1", "test model");
        Model saved = modelRepository.save(model);

        assertThat(saved.getId()).isNotNull();
        assertThat(modelRepository.findById(saved.getId())).contains(saved);
    }
}
-----------
>>> backend/src/main/resources/application.yml
spring:
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      chat:
        options:
          model: gpt-3.5-turbo

  application:
    name: genai

  datasource:
    url: jdbc:postgresql://localhost:5432/bookstore
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true

  sql:
    init:
      mode: always
      schema-location: classpath:/schema.sql


logging:
    level:
        org.springframework.ai: DEBUG
        org.springframework.boot.autoconfigure: INFO

server:
  port: 8080


-----------
>>> backend/src/test/resources/application.yml
spring:

  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect



  ai:
    openai:
      api-key: testkey
      chat:
        options:
          model: gpt-3.5-turbo

-----------
